📘 E-Commerce Platform (Amazon-like) – Project Summary
🔹 1. Project Title

“MSR shop”

🔹 2. Objectives

Build a scalable e-commerce website with 3 roles:

Admin → Controls platform, manages Super Admins, analytics & reports

Super Admin → Manages their own products, stocks, and orders

Customer → Shops products, manages cart, wishlist, and orders

Enable secure authentication, role-based access, and real-time analytics.

🔹 3. Technology Stack

Frontend: HTML5, CSS3, JavaScript (with AJAX/Fetch for dynamic requests)

Backend: Flask (Python micro-framework)

Database: MySQL (Relational DB for structured data)

Authentication: Flask-Login, JWT (for sessions)

Payment Gateway: Razorpay / Stripe + Cash on Delivery option

Deployment: Docker + AWS/Heroku

🔹 4. Roles & Features
👑 Admin Module

Dashboard with key analytics:

Total Orders

Overall Revenue

Monthly Revenue (Graph)

Total Users

Total Super Admins

Order Status Breakdown (Pending/Delivered/Cancelled)

Top Selling Products

Low Selling Alerts

Recent Orders

Super Admin Management

Create Super Admin (enter username, email, category → system generates unique code)

Manage super admin list (activate/deactivate)

Reports & Analytics

Export sales report (CSV/PDF)

Graphs (Orders per month, Revenue trends)

🛠 Super Admin Module

Profile: Register/Login using Admin’s unique code

Product Management:

Add new products (with multiple images)

Edit/Update/Delete products

Manage categories

Stock Management:

Track stock quantities

Low-stock alerts (threshold alerts like “Less than 10 items”)

Order Management:

View all orders related to their products

Update status (Processing → Shipped → Delivered)

👤 Customer Module

Browsing:

View all products by category

Product details page (images, description, price, stock, reviews)

Wishlist & Cart:

Add to wishlist/cart (login required)

Update cart (quantity, remove items)

Ordering:

Checkout flow with address + payment method

Payment Gateway (Online/Card/UPI) or Cash on Delivery (COD)

Order confirmation email + invoice

Order Tracking:

View order status (Pending → Shipped → Delivered)

Show expected delivery date (calculated based on shipping time, e.g., +5 days)

User Account:

Manage profile & addresses

View past orders

🔹 5. Database Design (MySQL)
Users Table
user_id (PK), name, email, password_hash, role (admin/super_admin/customer), 
unique_code (nullable, for super_admin registration), created_at

Products Table
product_id (PK), super_admin_id (FK), name, description, price, stock, category_id (FK), created_at

Product Images Table
image_id (PK), product_id (FK), image_url

Categories Table
category_id (PK), category_name

Orders Table
order_id (PK), customer_id (FK), total_amount, status (Pending/Shipped/Delivered), 
payment_method, payment_status, created_at, expected_delivery_date

Order Items Table
order_item_id (PK), order_id (FK), product_id (FK), quantity, price

Wishlist Table
wishlist_id (PK), user_id (FK), product_id (FK)

Cart Table
cart_id (PK), user_id (FK), product_id (FK), quantity

Payments Table
payment_id (PK), order_id (FK), payment_method, transaction_id, payment_status, created_at

🔹 6. Project Workflow
1️⃣ Admin Flow

Login → Dashboard

Create Super Admin (generates unique code)

View analytics, revenue, reports

2️⃣ Super Admin Flow

Register using unique code → Manage own store

Add/edit/delete products with multiple images

Monitor stocks & orders

Update delivery status

3️⃣ Customer Flow

Browse products → Add to cart/wishlist → Checkout

Enter address & payment option (COD/Online)

Place order → See expected delivery date

Track orders

🔹 7. Security Measures

Password hashing (bcrypt/argon2)

Role-based authentication (Flask-Login decorators)

SQL Injection protection (Flask SQLAlchemy ORM)

CSRF protection in forms
